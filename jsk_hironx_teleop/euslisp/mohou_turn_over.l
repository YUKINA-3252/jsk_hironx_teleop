(load "models/arrow-object.l")
(load "package://hrpsys_ros_bridge_tutorials/euslisp/hironxjsk-interface.l")
(load "package://jsk_hironx_teleop/euslisp/detect.l")
(load "package://jsk_hironx_teleop/euslisp/hiro-utils.l")
(ros::load-ros-package "jsk_recognition_msgs")

;; gripper
(defun turn-over-open-lhand ()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
    (setf (aref hand-angle-vector 0) 54.2384)
    (setf (aref hand-angle-vector 1) -54.2384)
    (setf (aref hand-angle-vector 2) -10)
    (setf (aref hand-angle-vector 3) 30)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)))
(defun turn-over-close-lhand ()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
    (setf (aref hand-angle-vector 0) -30)
    ;; (setf (aref hand-angle-vector 1) 10)
    (setf (aref hand-angle-vector 1) 20)
    (setf (aref hand-angle-vector 2) 10)
    (setf (aref hand-angle-vector 3) 40)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)))

;; (defun turn-over-open-lhand ()
;;   (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
;;     (setf (aref hand-angle-vector 0) 90)
;;     (setf (aref hand-angle-vector 1) 0)
;;     (setf (aref hand-angle-vector 2) -90)
;;     (setf (aref hand-angle-vector 3) 0)
;;     (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
;;     (ir2ri-hand)))
(defun turn-over-open-rhand ()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :rhand)))
    (setf (aref hand-angle-vector 0) 0)
    (setf (aref hand-angle-vector 1) 0)
    (setf (aref hand-angle-vector 2) 0)
    (setf (aref hand-angle-vector 3) 0)
    (send *hironxjsk* :hand-angle-vector :rhand hand-angle-vector)
    (ir2ri-hand)))

(reset-pose)
(detect-pose)

(detect-paper)
(detect-box)
(setq object-list (list *hironxjsk* *right-coords-arrow* *left-coords-arrow* *right-target-arrow* *left-target-arrow* *target-bbox* *target-bbox-arrow* *target-paper* *target-paper-arrow*))
(objects object-list)
(setq box-z-size (- (+ (elt (send (send *target-bbox* :copy-worldcoords) :pos) 2) (/ (z-of-cube *target-bbox*) 2)) (elt (send (send *target-paper* :copy-worldcoords) :pos) 2)))

;; hold box with right hand
;; (send *right-target-arrow* :move-to (send (send (send (send *target-bbox* :copy-worldcoords) :translate (float-vector 0 (- (+ (/ (y-of-cube *target-bbox*) 2) 60)) (+ (- (/ box-z-size 2)) 20)) :world) :rotate pi :z) :rotate pi :x) :world)
(send *right-target-arrow* :move-to (send (send (send (send *target-bbox* :copy-worldcoords) :translate (float-vector 0 (- (+ (/ (y-of-cube *target-bbox*) 2) 50)) (+ (- (/ box-z-size 2)) 20)) :world) :rotate pi/2 :z) :rotate pi :x) :world)
(solve-ik-rarm *right-target-arrow*)
(ir2ri)
(force-move :rarm :z "minus" 3 3)

;; lhand
(turn-over-open-lhand)
(send *left-target-arrow* :move-to (send (send (send (send *target-paper-arrow* :copy-worldcoords) :rotate (deg2rad 90) :z) :rotate (deg2rad -90) :x) :translate (float-vector -20 (+ (/ z-of-paper 2) 20) 31) :world) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri)
;; lower right arm until it hits the desk
(force-move :larm :z "minux" 1 1)
(send *left-target-arrow* :move-to (send *hironxjsk* :larm :end-coords :copy-worldcoords) :world)
(send *left-target-arrow* :translate #f(0 -40 0) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri)
(send *left-target-arrow* :translate #f(0 0 20) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri)
(send *left-target-arrow* :rotate (deg2rad -20) :x :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri)
;; (send *left-target-arrow* :translate #f(0 -20 0) :world)
;; (solve-ik-larm *left-target-arrow*)
;; (ir2ri)
;; close hand
(turn-over-close-lhand)
(unix::sleep 2)
(send *left-target-arrow* :rotate (deg2rad 20) :x :world)
(send *left-target-arrow* :translate #f(0 0 10) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri)

;; move ps4 controller
(send *hironxjsk* :larm-wrist-r :joint-angle 45)
(ir2ri)
(open-lhand)

;; insert ps4
(detect-pose)
(send *left-target-arrow* :move-to (send *hironxjsk* :larm :end-coords :copy-worldcoords) :world)
(send *left-target-arrow* :rotate (deg2rad -90) :z :world)
(send *left-target-arrow* :rotate (deg2rad -90) :x :world)
(send *left-target-arrow* :translate #f(0 -200 0) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri)

(reset-pose)
(send *hironxjsk* :larm-wrist-r :joint-angle 180)
(ir2ri)
(open-lhand)
